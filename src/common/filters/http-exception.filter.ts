import {
  ExceptionFilter,
  Catch,
  ArgumentsHost,
  HttpException,
  HttpStatus,
} from '@nestjs/common';
import { FastifyReply, FastifyRequest } from 'fastify';
import { QueryFailedError } from 'typeorm';

@Catch()
export class HttpExceptionFilter<T> implements ExceptionFilter {
  catch(exception: unknown, host: ArgumentsHost) {
    const ctx = host.switchToHttp();
    const response = ctx.getResponse<FastifyReply>(); // ‚úÖ Usar Fastify
    const request = ctx.getRequest<FastifyRequest>(); // ‚úÖ Usar Fastify

    let status = HttpStatus.INTERNAL_SERVER_ERROR; // Por defecto, error 500
    let message = 'Error interno del servidor';

    // üìå Imprimir el error en la consola para debug
    console.error('‚ùå ERROR DETECTADO:', exception);

    // ‚úÖ Capturar errores de PostgreSQL (TypeORM)
    if (exception instanceof QueryFailedError) {
      const ex = exception as any;
      switch (ex.code) {
        case '23505': // üîπ Violaci√≥n de restricci√≥n UNIQUE
          status = HttpStatus.CONFLICT; // 409 Conflict
          message = ex.detail || 'Clave duplicada detectada';
          break;

        case '23502': // üîπ Columna con restricci√≥n NOT NULL est√° en NULL
          status = HttpStatus.CONFLICT; // 400 Bad Request
          message = `El campo ${ex.column} de la tabla ${ex.table} no puede ser nulo`;
          break;

        case '23503': // üîπ Violaci√≥n de clave for√°nea (FK)
          status = HttpStatus.BAD_REQUEST; // 400 Bad Request
          message = 'La relaci√≥n con otra tabla no es v√°lida';
          break;

        case '23514': // üîπ Violaci√≥n de restricci√≥n CHECK
          status = HttpStatus.BAD_REQUEST; // 400 Bad Request
          message = 'El valor ingresado no cumple con las reglas de validaci√≥n';
          break;

        default:
          status = HttpStatus.INTERNAL_SERVER_ERROR;
          message = 'Error interno del servidor TypeORM';
          break;
      }
    }

    // ‚úÖ Capturar errores de NestJS
    else if (exception instanceof HttpException) {
      status = exception.getStatus();
      const exceptionResponse = exception.getResponse();

      // Extraer mensaje del error
      message =
        typeof exceptionResponse === 'string'
          ? exceptionResponse
          : (exceptionResponse as any).message || message;
    }

    // üìå Respuesta uniforme para el frontend
    response.status(status).send({
      statusCode: status,
      message,
      error: HttpStatus[status],
      timestamp: new Date().toISOString(),
      path: request.url,
    });
  }
}
